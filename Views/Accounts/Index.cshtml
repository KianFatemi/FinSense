@model IEnumerable<PersonalFinanceDashboard.Models.FinancialAccount>

@{
    ViewData["Title"] = "My Accounts";
}

<h1>@ViewData["Title"]</h1>

<p>
    <a asp-action="displayCreateAccountForm" class="btn btn-primary">Add New Account</a>
    <button id="link-account-button" class=" = btn btn-primary">Link New Bank Account</button>
</p>


@* Check if there are any accounts in the model passed from the controller *@
@if (Model.Any())
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>
                    @*gets the display name of the property from the model *@
                    @Html.DisplayNameFor(model => model.AccountName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.AccountType)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CurrentBalance)
                </th>
                <th></th> 
            </tr>
        </thead>
        <tbody>
            @* Loop through each account in the model and create a table row *@
            @foreach (var account in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => account.AccountName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => account.AccountType)
                    </td>
                    <td>
                        @* Format the decimal value as currency*@
                        @account.CurrentBalance.ToString("C")
                    </td>
                    <td>
                        <a class="btn btn-info btn-sm" asp-action="Details" asp-route-id="@account.ID">
                            Details
                        </a>
                        <a class="btn btn-info btn-sm" asp-action="Details" asp-route-id="@account.ID">
                            Delete
                        </a>
                            <button class="btn btn-info btn-sm sync-button" data-plaid-item-id="@account.PlaidItem?.ID ?? 0">
                            Sync
                        </button>
                        
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="text-center">
        <p class="lead">You haven't added any financial accounts yet.</p>
        <p>Get started by adding your first one!</p>
        <a asp-action="displayCreateAccountForm" class="btn btn-lg btn-success mt-3">Add Your First Account</a>
    </div>
}

@section Scripts {
    <script src="https://cdn.plaid.com/link/v2/stable/link-initialize.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const linkButton = document.getElementById('link-account-button');
         

            linkButton.addEventListener('click', async function () {
                const response = await fetch('/api/plaid/create_link_token', {
                    method: 'POST',
                });
                const data = await response.json();
                const linkToken = data.link_token;

                const handler = Plaid.create({
                    token: linkToken,
                    onSuccess: async (public_token, metadata) => {
                       
                        try {
                            const exchangeResponse = await fetch('/api/plaid/exchange_public_token', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ PublicToken: public_token }),
                            });

                            if (!exchangeResponse.ok) {
                                console.error("Server responded with an error:", exchangeResponse.status, exchangeResponse.statusText);
                                const errorData = await exchangeResponse.json();
                                console.error("Server error details:", errorData);
                                return; 
                            }

                            window.location.reload();

                        } catch (error) {
                            console.error("A JavaScript or network error occurred during fetch:", error);
                            alert("A critical error occurred. Please check the console.");
                        }
                    },
                    onExit: (err, metadata) => {
                        if (err != null) {
                            console.error("Plaid Link exited with an error:", err);
                        } else {
                            console.log("User exited Plaid Link without error.");
                        }
                    },
                });

                handler.open();
            });
            document.querySelectorAll('.sync-button').forEach(button => {
            button.addEventListener('click', async function() {
                const plaidItemId = this.getAttribute('data-plaid-item-id');
                console.log(`Syncing Plaid Item ID: ${plaidItemId}`);

                // Provide visual feedback to the user
                this.textContent = 'Syncing...';
                this.disabled = true;

                try {
                    const response = await fetch('/api/plaid/sync_account_transactions', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ PlaidItemId: parseInt(plaidItemId) })
                    });

                    if (!response.ok) {
                        throw new Error('Server responded with an error during sync.');
                    }

                    const result = await response.json();
                    alert(result.message); // Show the success message from the server
                    window.location.reload(); // Reload to see new transactions

                } catch (error) {
                    console.error('Failed to sync transactions:', error);
                    alert('Failed to sync transactions. See console for details.');
                    this.textContent = 'Sync'; 
                    this.disabled = false;
                }
            });
        });
        });
    </script>
}