@{
	ViewData["Title"] = "Dashboard";
}

<div class="dashboard-container">

    <div class="main-content">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h4>Welcome back, Ashley</h4>
                <p class="text-muted">Here's an overview of all of your balances.</p>
            </div>
            <div class="header-icons">
                <i class="bi bi-search"></i>
                <i class="bi bi-bell"></i>
                <img src="https://i.imgur.com/k9a4v5g.png" alt="User" class="user-avatar" />
            </div>
        </div>

        <div class="row g-4">
            <div class="col-md-3">
                <div class="summary-card">
                    <div class="card-icon total-balance-icon"><i class="bi bi-bank2"></i></div>
                    <div class="card-label">Total Balance</div>
                    <div class="card-value" id="total-balance-value">$0.00</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="summary-card">
                    <div class="card-icon"><i class="bi bi-credit-card"></i></div>
                    <div class="card-label">Main Account</div>
                    <div class="card-value" id="main-account-value">$0.00</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="summary-card">
                    <div class="card-icon"><i class="bi bi-piggy-bank"></i></div>
                    <div class="card-label">Savings</div>
                    <div class="card-value" id="savings-value">$0.00</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="summary-card">
                    <div class="card-icon"><i class="bi bi-graph-up-arrow"></i></div>
                    <div class="card-label">Investments</div>
                    <div class="card-value" id="investments-value">$0.00</div>
                </div>
            </div>
        </div>

        <div class="row g-4 mt-3">
            <div class="col-md-8">
                <div class="chart-card">
                    <h5 class="card-title">Account Balance</h5>
                    <canvas id="accountBalanceChart"></canvas>
                </div>
            </div>
            <div class="col-md-4">
                <div class="chart-card">
                    <h5 class="card-title">Investments</h5>
                    <canvas id="investmentsDoughnutChart"></canvas>
                </div>
            </div>
            <div class="col-12">
                <div class="chart-card">
                    <h5 class="card-title">Recent Transactions</h5>
                    <div id="recent-transactions-list">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {

            // API call to get all dashboard data
            fetch('/api/DashboardApi/GetDashboardData')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Network response was not ok: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Dashboard data received:", data);

                    // Helper function to format currency
                    const formatCurrency = (value) => value.toLocaleString('en-US', { style: 'currency', currency: 'USD' });

                    
                    document.getElementById('total-balance-value').textContent = formatCurrency(data.totalBalance);
                    document.getElementById('main-account-value').textContent = formatCurrency(data.mainAccountBalance);
                    document.getElementById('savings-value').textContent = formatCurrency(data.savingsBalance);
                    document.getElementById('investments-value').textContent = formatCurrency(data.investmentsValue);

                    // Populate Recent Transactions
                    const transactionList = document.getElementById('recent-transactions-list');
                    transactionList.innerHTML = ''; // Clear existing content
                    data.recentTransactions.forEach(tx => {
                        const amountClass = tx.amount < 0 ? 'text-danger' : 'text-success';
                        const iconClass = tx.amount < 0 ? 'bi-arrow-up-circle' : 'bi-arrow-down-circle';

                        const transactionHtml = `
                            <div class="transaction-item">
                                <div class="transaction-details">
                                    <div class="transaction-icon"><i class="bi ${iconClass}"></i></div>
                                    <div>
                                        <div class="transaction-name">${tx.venderName}</div>
                                        <div class="transaction-category">${tx.category}</div>
                                    </div>
                                </div>
                                <div class="transaction-amount ${amountClass}">${formatCurrency(tx.amount)}</div>
                            </div>
                        `;
                        transactionList.insertAdjacentHTML('beforeend', transactionHtml);
                    });


                    // Render Account Balance Line Chart
                    const balanceCtx = document.getElementById('accountBalanceChart').getContext('2d');
                    new Chart(balanceCtx, {
                        type: 'line',
                        data: {
                            labels: data.accountBalanceHistory.map(h => h.date),
                            datasets: [{
                                label: 'Total Balance',
                                data: data.accountBalanceHistory.map(h => h.balance),
                                borderColor: 'rgba(75, 192, 192, 1)',
                                backgroundColor: 'rgba(75, 192, 192, 0.1)',
                                fill: true,
                                tension: 0.4
                            }]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                y: { beginAtZero: false },
                                x: { grid: { display: false } }
                            },
                            plugins: { legend: { display: false } }
                        }
                    });

        const doughnutCtx = document.getElementById('investmentsDoughnutChart').getContext('2d');

        const investmentHoldings = data.investmentHoldings || [];

        const holdingLabels = investmentHoldings.map(h => h.tickerSymbol);
        const holdingData = investmentHoldings.map(h => h.totalValue);

        const holdingColors = [
            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0',
            '#9966FF', '#FF9F40', '#66D3FA', '#FFD700',
            '#C9CBCF', '#8BC34A'
        ];

        // Fallback in case more holdings than colors
        while (holdingColors.length < holdingLabels.length) {
            holdingColors.push('#' + Math.floor(Math.random() * 16777215).toString(16));
        }

        new Chart(doughnutCtx, {
        type: 'doughnut',
        data: {
            labels: holdingLabels,
            datasets: [{
                label: 'Holdings',
                data: holdingData,
                backgroundColor: holdingColors
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            }
        }
        });

        })
        .catch(error => {
        console.error('There was a problem fetching the dashboard data:', error);
        });
        });
    </script>
}


